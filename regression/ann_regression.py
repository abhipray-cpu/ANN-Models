# -*- coding: utf-8 -*-
"""ANN regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YJT6ruqCNq7Wp4WlckyRbQrJ49QS0kYn

# **#This is an ANN model for regression**
"""

#importing libraries
import pandas as pd
import numpy as np
import tensorflow as tf
import seaborn as sns

dataset=pd.read_excel('/content/Folds5x2_pp.xlsx')
x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

print(dataset)

print(y)

print(x)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

"""# **Building The ANN**"""

ann=tf.keras.models.Sequential()

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))#this is the first hidden layer
ann.add(tf.keras.layers.Dense(units=6,activation='relu'))#this is the second hidden layer
ann.add(tf.keras.layers.Dense(units=1))#this is the output layer and since regression therefore no activation function

"""#Training the ANN"""

!pip install tensor-dash

ann.compile(optimizer='adam',loss='mean_squared_error')
from tensordash.tensordash import Tensordash
histories=Tensordash(
    ModelName='ann regression (housing dataset)',
    email='dumkaabhipray@gmail.com',
    password='kamalanita1@'
)

try:
  ann.fit(x_train,y_train,batch_size=32,epochs=100,callbacks=[histories])
except Exception as e:
  print(e)
  histories.sendCrash()

"""#Predicting on test set

"""

#predicting test set results
y_pred=ann.predict(x_test)#this will simply return probablity
np.set_printoptions(precision=2)
res=np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)
print(res)

#visualizing the results
import seaborn as sns
ax1=sns.distplot(y_test,hist=False,color="r",label="actual value")
sns.distplot(y_pred,hist=False,color="b",label="predicted values",ax=ax1)

#cross validating the model
#need to split data into different sets first
dataSets=[]
accuracies=[]
for val in range(1,10):
  print(f'this is the {val}th dataset split results')
  x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=val+7)
  try:
    history=ann.fit(np.asarray(x_train).astype(np.float32), np.asarray(y_train).astype(np.float32),batch_size=32,epochs=100,callbacks=[histories])
    accuracies.append(history)
  except Exception as e:
    print(e)
  histories.sendCrash()